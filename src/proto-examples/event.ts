// Generated by proto-gen-ts-rest

import { initContract } from "@ts-rest/core";

import { z } from "zod";

const c = initContract();export const EventCreateRequest = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  strategy: z.string().optional(),
});

export const EventCreateResponse = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
});

export const DateRange = z.object({
  from: z.string(),
  to: z.string(),
});

export const EventDeleteRequest = z.object({
  id: z.string().optional(),
});

export const EventUpdateRequest = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
});

export const EventUpdateResponse = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
});

export const EventDetailRequest = z.object({
  id: z.string().optional(),
});

export const EventDetailResponse = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
});

export const Page = z.object({
  offset: z.number().optional(),
  limit: z.number().optional(),
});

export const Status = z.enum(["None", "Wait", "Created", "Live"]);

export const EventSearchRequest = z.object({
  by_status: Status,
  by_date: DateRange,
  page: Page,
});

export const Event = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
});

export const EventSearchResponse = z.object({
  event: Event,
  page: Page,
});

// event Service
export const eventContract = c.router({
 Create: {
    method: "POST",
    path: "/event",
    body: EventCreateRequest,
    responses: {
      200: EventCreateResponse
    },
  },
 Delete: {
    method: "DELETE",
    path: "/event/{ID}",
    body: EventDeleteRequest,
    responses: {
      200: z.object({})
    },
  },
 Update: {
    method: "POST",
    path: "/event/{ID}",
    body: EventUpdateRequest,
    responses: {
      200: EventUpdateResponse
    },
  },
 Detail: {
    method: "GET",
    path: "/event/{ID}",
    query: EventDetailRequest,
    responses: {
      200: EventDetailResponse
    },
  },
 Search: {
    method: "POST",
    path: "/event/search",
    body: EventSearchRequest,
    responses: {
      200: EventSearchResponse
    },
  },
});

